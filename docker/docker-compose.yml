version: '3.8'

services:
  # O scraper executa primeiro como uma tarefa única
  scraper:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    volumes:
      - ../downloads:/app/downloads
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=natal_prefeitura
    depends_on:
      db:
        condition: service_healthy
    # Este serviço não tem 'restart' e irá parar após a execução

  # A API sobe depois que o scraper depende dela
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    # Usa o comando para iniciar apenas a API
    command: python main.py --api-only
    ports:
      - "8000:8000"
    volumes:
      - ../downloads:/app/downloads
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=natal_prefeitura
    depends_on:
      scraper:
        # A API só inicia depois que o scraper finalizar com sucesso
        condition: service_completed_successfully
    restart: unless-stopped

  db:
    image: postgres:14
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=natal_prefeitura
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data: